include<bits/stdc++.h>
using namespace std;
static int p=0;
class A
{
    char busno[5],driver[10],arrival[5],depart[5],from[10],to[10],seat[8][4][10];
    public:
    void install();
    void allotment();
    void empty();
    void show();
    void avail();
    void position(int i);
}
bus[10];
void vline(char ch)
{
    for(int i=80;i>0;i--)
    cout<<ch;
}
void A::install()
{
    cout<<"Enter bus no: ";
    cin>>bus[p].busno;
    cout<<"\nEnter Driver's name: ";
    cin>>bus[p].driver;
    cout<<"\nArrival TIme: ";
    cin>>bus[p].arrival;
    cout<<"\nDeparture: ";
    cin>>bus[p].depart;
    cout<<"\nFrom: \t\t\t";
    cin>>bus[p].from;
    cout<<"\nTo: \t\t\t";
    cin>>bus[p].to;
    bus[p].empty();
    p++;
}
void A::allotment()
{
    int seat;
    char number[5];
    top:
    cout<<"Bus no: ";
    cin>>number;
    int i;
    for(i=0;i<=p;i++)
    {
        if(strcmp(bus[i].busno,number)==0) break;
    }
    while(i<=p)
    {
        cout<<"\nSeat Number: ";
        cin>>seat;
        if(seat>32) cout<<"\nThere are only 32 available in this bus.";
        else 
        {
            if(strcmp(bus[i].seat[seat/4][(seat%4)-1],"Empty")==0)
            {
                cout<<"Enter passenger's name: ";
                cin>>bus[i].seat[seat/4][(seat%4)-1];
                break;
            }
            else cout<<"The seat no. is already reserved.\n";
        }
    }
    if(i>p)
    {
        cout<<"Enter correct bus no.\n";
        goto top;
    }
}
void A::empty()
{
    for(int i=0;i<8;i++)
    {
        for(int j=0;j<4;j++)
        {
            strcpy(bus[p].seat[i][j],"Empty");
        }
    }
}
void A::show()
{
    int k;
    char number[5];
    cout<<"Enter bus no: ";
    cin>>number;
    for(k=0;k<=p;k++)
    {
        if(strcmp(bus[k].busno,number)==0)
        break;
    }
    while(k<=p)
    {
        vline('*');
        cout<<"Bus No: \t"<<bus[k].busno;
        cout<<"\nDriver: \t"<<bus[k].driver<<"\t\tArrival time: \t"<<bus[k].arrival<<"\tDeparture time:"<<bus[k].depart<<"\nFrom: \t\t"<<bus[k].from<<"\t\tTo: \t\t"<<bus[k].to<<"\n";
        vline('*');
        bus[0].position(k);
        int a=1;
        for(int i=0;i<8;i++)
        {
            for(int j=0;j<4;j++)
            {
                a++;
                if(strcmp(bus[k].seat[i][j],"Empty")!=0)
                {
                    cout<<"\nThe seat no "<<(a-1)<<"  is reserved for "<<bus[k].seat[i][j]<<".";
                }
            }
        }
        break;
    }
    if(k>p) cout<<"Enter correct bus no: ";
}
void A::position(int L)
{
    int s=0;p=0;
    for(int i=0;i<8;i++)
    {
        cout<<endl;
        for(int j=0;j<4;j++)
        {
            s++;
            if(strcmp(bus[L].seat[i][j],"Empty")==0)
            {
                cout.width(5);
                cout.fill(' ');
                cout<<s<<".";
                cout.width(10);
                cout.fill(' ');
                cout<<bus[L].seat[i][j];
                p++;
            }
            else
            {
                cout.width(5);
                cout.fill(' ');
                cout<<s<<".";
                cout.width(10);
                cout.fill(' ');
                cout<<bus[L].seat[i][j];
            }
        }
    }
    cout<<endl<<endl<<"There are "<<p<<" seats empty in Bus No: "<<bus[L].busno;
}
void A::avail()
{
    for(int i=0;i<p;i++)
    {
        vline('*');
        cout<<"Bus No: \t"<<bus[i].busno;
        cout<<"\nDriver: \t"<<bus[i].driver<<"\t\tArrival time: \t"<<bus[i].arrival<<"\tDeparture time:"<<bus[i].depart<<"\nFrom: \t\t"<<bus[i].from<<"\t\tTo: \t\t"<<bus[i].to<<"\n";
        vline('*');
        vline('_');
    }
}
int main()
{
    int x;
    while(1)
    {
        cout<<"\n\n\n\n\n";
        cout<<"\t\t\t1.Install\n\t\t\t"<<"2.Reservation\n\t\t\t"<<"3.Show\n\t\t\t"<<"4.Buses Available. \n\t\t\t"<<"5.Exit";
        cout<<"\n\t\t\tEnter your choice:-> ";
        cin>>x;
        switch(x)
        {
            case 1: bus[p].install();
            break;
            case 2: bus[p].allotment();
            break;
            case 3: bus[0].show();
            break;
            case 4: bus[0].avail();
            break;
            case 5:exit(0);
        }
    }
    return 0;
}
